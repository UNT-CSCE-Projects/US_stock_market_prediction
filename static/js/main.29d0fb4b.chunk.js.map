{"version":3,"sources":["components/plot/PlotGraph.js","components/header/HeaderSect.js","App.js","reportWebVitals.js","index.js","assets/images/download.jpeg"],"names":["PlotGraph","chartData","setChartData","useState","useEffect","fetch","then","response","text","data","rows","split","map","row","keys","stockData","slice","rowData","forEach","key","index","length","React","createElement","unpack","type","mode","name","x","y","line","color","Plot","HeaderSect","stockId","setStockId","fetchDataFromAl1","e","console","log","className","src","logoImage","alt","href","rel","target","style","width","marginLeft","marginTop","onSubmit","preventDefault","placeholder","value","onChange","max","min","required","onClick","App","reportWebVitals","onPerfEntry","Function","__webpack_require__","bind","_ref","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","document","getElementById","render","StrictMode","module","exports","p"],"mappings":"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","file":"static/js/main.29d0fb4b.chunk.js","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport Plot from 'react-plotly.js';\n\nconst PlotGraph = () => {\n  const [chartData, setChartData] = useState([]);\n\n  useEffect(() => {\n    // Fetch data from the provided URL\n    fetch('https://raw.githubusercontent.com/plotly/datasets/master/finance-charts-apple.csv')\n      .then((response) => response.text())\n      .then((data) => {\n        const rows = data.split('\\n').map(row => row.split(','));\n        const keys = rows[0];\n        const stockData = rows.slice(1).map(row => {\n          const rowData = {};\n          keys.forEach((key, index) => {\n            rowData[key] = row[index];\n          });\n          return rowData;\n        });\n\n        setChartData(stockData);\n      });\n  }, []);\n\n  if (chartData.length === 0) {\n    return <div>Loading...</div>;\n  }\n\n  // Function to unpack data\n  const unpack = (rows, key) => rows.map(row => row[key]);\n\n  // Create traces\n  const trace1 = {\n    type: 'scatter',\n    mode: 'lines',\n    name: 'AAPL High',\n    x: unpack(chartData, 'Date'),\n    y: unpack(chartData, 'AAPL.High'),\n    line: { color: '#17BECF' }\n  };\n\n  // const trace2 = {\n  //   type: 'scatter',\n  //   mode: 'lines',\n  //   name: 'AAPL Low',\n  //   x: unpack(chartData, 'Date'),\n  //   y: unpack(chartData, 'AAPL.Low'),\n  //   line: { color: '#7F7F7F' }\n  // };\n\n  const data = [trace1];\n\n\n  return (\n    <div>\n      <Plot data={data} />\n    </div>\n  );\n};\n\nexport default PlotGraph;\n","\nimport logoImage from \"../../assets/images/download.jpeg\";\nimport PlotGraph from '../plot/PlotGraph';\nimport React, { useState } from 'react';\n\n\n  \n\nexport default function HeaderSect() {\n  const [stockId, setStockId] = useState('');\n\n  const handleStockIdChange = (e) => {\n    setStockId(e.target.value);\n  };\n\n  const handleSearchSubmit = (e) => {\n    e.preventDefault();\n    // You can handle the search logic here\n    console.log('Stock ID submitted:', stockId);\n  };\n\n  const fetchDataFromAl1 = (e)=>{\n    console.log(e,' loading')\n  }\n  return (\n    <div>\n      <nav className=\"relative py-3 custom-nav text-white\">\n        <div className=\"container mx-auto\">\n          <div className=\"flex items-center justify-between\">\n            <img\n              src={logoImage}\n              alt=\"logo\"\n              className=\"w-20\"\n            />\n            <div className=\"flex-1 max-w-xs custom-title\">\n              Optiver Stock Price Prediction\n            </div>\n            <div className=\"flex space-x-4\">\n              <a href=\"https://www.kaggle.com/competitions/optiver-trading-at-the-close\"  rel=\"noopener noreferrer\" target=\"_blank\" className=\"text-blue-300\">Dataset</a>\n              <a href=\"https://github.com/UNT-CSCE-Projects/US_stock_market_prediction\"  rel=\"noopener noreferrer\" target=\"_blank\" className=\"text-blue-300\">Github</a>\n            </div>\n          </div>\n        </div>\n      </nav>\n      <div\n      className=\"relative items-center justify-center\"\n      style={{\n        width: '30%',\n        marginLeft: '33rem',\n        marginTop: '10px'\n      }}\n    >\n        <form onSubmit={handleSearchSubmit} className=\"flex items-center space-x-2\" >\n              <div className=\"w-40\">Stock Number </div>\n              <input\n                type=\"number\"\n                placeholder=\"Enter Stock ID\"\n                value={stockId}\n                onChange={handleStockIdChange}\n                max={200}\n                min={0}\n                required\n                className=\"px-2 py-1 border border-gray-300 rounded\"\n              />\n              <button type=\"submit\" className=\"bg-white text-blue-500 px-2 py-1 rounded hover:bg-gray-100 focus:outline-none\">\n                Set\n              </button>\n            </form>\n      </div>\n     \n      <div className=\"algobar \">\n        <button className=\"section bg-blue-500 text-white \" onClick={()=>fetchDataFromAl1(stockId)}>Algorithm 1</button>\n        <button className=\"section bg-blue-500 text-white\" onClick={()=>fetchDataFromAl1(stockId)}>Algorithm 2</button>\n        <button className=\"section bg-blue-500 text-white\" onClick={()=>fetchDataFromAl1(stockId)}>Algorithm 3</button>\n      </div>\n\n      <div className='algobar' >\n        <PlotGraph/>\n      </div>\n    </div>\n  );\n}\n","\nimport './assets/styles/main.css'\nimport HeaderSect from './components/header/HeaderSect';\n\nimport React from 'react';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <HeaderSect/>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","module.exports = __webpack_public_path__ + \"static/media/download.f53c0980.jpeg\";"],"sourceRoot":""}